import e from"isomorphic-unfetch";const t="https://retroachievements.org/API",o=(e,t,o,s={})=>{let r=`${e}/${t}`.replace(/([^:]\/)\/+/g,"$1");const a={z:o.userName,y:o.webApiKey};for(const[e,t]of Object.entries(s))r.includes(`:${e}`)?r=r.replace(`:${e}`,String(t)):void 0!==t&&(a[e]=String(t));return`${r}?${new URLSearchParams(a).toString()}`},s=async t=>{const{url:o}=t,s=await e(o);return await s.json()};function r(){return r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var s in o)Object.prototype.hasOwnProperty.call(o,s)&&(e[s]=o[s])}return e},r.apply(this,arguments)}const a=(e,t={})=>{const{shouldCastToNumbers:o,shouldMapToBooleans:s}=t;let i=e;if(Array.isArray(e)){const o=[];for(const s of e)o.push(a(s,t));i=o}else if(!Array.isArray(e)&&e instanceof Object){let u={};for(const[i,c]of Object.entries(e)){let e=c;null!=o&&o.includes(i)&&(e=null===c?null:Number(c)),null!=s&&s.includes(i)&&(e=null===c?null:"1"===c),u=r({},u,{[n(i)]:a(e,t)})}i=u}return i},n=e=>{if(e.toUpperCase()===e)return e.toLowerCase();let t=e.charAt(0).toLowerCase()+e.slice(1);return t=t.replace(/ID/g,"Id"),t=t.replace(/URL/g,"Url"),t=t.replace(/rA/g,"ra"),t},i=async(e,r)=>{const{achievementId:n,offset:i,count:u}=r,c={a:n};i&&(c.o=i),u&&(c.c=u);const l=o(t,"/API_GetAchievementUnlocks.php",e,c),m=await s({url:l});return a(m,{shouldCastToNumbers:["ID","Points","TrueRatio","RAPoints"],shouldMapToBooleans:["HardcoreMode"]})},u=async e=>{const r=o(t,"/API_GetConsoleIDs.php",e),n=await s({url:r});return a(n,{shouldCastToNumbers:["ID"]})},c=async(e,n)=>{const{consoleId:i,shouldOnlyRetrieveGamesWithAchievements:u,shouldRetrieveGameHashes:c}=n;let l={i};void 0!==u&&(l=r({},l,{f:u?1:0})),c&&(l=r({},l,{h:c?1:0}));const m=o(t,"/API_GetGameList.php",e,l),d=await s({url:m});return a(d,{shouldCastToNumbers:["ID","ConsoleID"]})},l=async e=>{const r=o(t,"/API_GetAchievementOfTheWeek.php",e),n=await s({url:r});return a(n,{shouldCastToNumbers:["ID","Points","TrueRatio","TotalPlayers","RAPoints","UnlocksCount"],shouldMapToBooleans:["HardcoreMode"]})},m=async e=>{const r=o(t,"/API_GetActiveClaims.php",e),n=await s({url:r});return a(n,{shouldCastToNumbers:["ID","GameID","ClaimType","SetType","Status","Extension","Special","MinutesLeft"]})},d=async e=>{const r=o(t,"/API_GetTopTenUsers.php",e),a=await s({url:r}),n=[];for(const e of a)n.push({userName:e[1],totalPoints:Number(e[2]),totalRatioPoints:Number(e[3])});return n};var h,p,A;!function(e){e[e.Primary=0]="Primary",e[e.Collaboration=1]="Collaboration"}(h||(h={})),function(e){e[e.NewSet=0]="NewSet",e[e.Revision=1]="Revision"}(p||(p={})),function(e){e[e.Active=0]="Active",e[e.Complete=1]="Complete",e[e.Dropped=2]="Dropped"}(A||(A={}));const I=async(e,r)=>{const{gameId:n}=r,i=o(t,"/API_GetAchievementCount.php",e,{i:n}),u=await s({url:i});return a(u)},y=async(e,r)=>{const{gameId:a,flags:n,hardcore:i}=r,u={i:a};void 0!==n&&(u.f=n),void 0!==i&&(u.h=!0===i?1:0);const c=o(t,"/API_GetAchievementDistribution.php",e,u);return await s({url:c})},P=async(e,r)=>{const{gameId:n}=r,i=o(t,"/API_GetGame.php",e,{i:n}),u=await s({url:i});return a(u,{shouldCastToNumbers:["ID","ForumTopicID","ConsoleID","Flags","Released"]})},v=async(e,r)=>{const{gameId:n}=r,i=o(t,"/API_GetGameExtended.php",e,{i:n}),u=await s({url:i});return a(u,{shouldCastToNumbers:["ID","NumAwarded","NumAwardedHardcore","Points","TrueRatio","DisplayOrder","NumDistinctPlayersCasual","NumDistinctPlayersHardcore","Released"]})},N=async(e,r)=>{const{gameId:n,type:i}=r,u=o(t,"/API_GetGameRankAndScore.php",e,{g:n,t:"latest-masters"===i?1:0}),c=await s({url:u});return a(c,{shouldCastToNumbers:["TotalScore"]})},T=async(e,r)=>{const{gameId:n}=r,i=o(t,"/API_GetGameRating.php",e,{i:n}),u=await s({url:i});return a(u)};var f,b;async function C(e,r={}){const n=D(r),i=o(t,"/API_GetTicketData.php",e,n),u=await s({url:i});return a(u,{shouldCastToNumbers:["ID","AchievementID","Points","GameID","ReportType","ReportState","OpenTickets"],shouldMapToBooleans:["Hardcore"]})}!function(e){e[e.CoreAchievements=3]="CoreAchievements",e[e.UnofficialAchievements=5]="UnofficialAchievements"}(f||(f={})),function(e){e.Primary="0",e.Collaboration="1"}(b||(b={}));const D=e=>{const{ticketId:t,isGettingMostTicketedGames:o,userName:s,gameId:r,isGettingTicketsForUnofficialAchievements:a,shouldReturnTicketsList:n,achievementId:i}=e;let u={};return void 0!==t?u.i=t:o?(u.f="1",u=G(u,e)):s?u.u=s:r?(u.g=r,a&&(u.f="5"),n&&(u.d="1")):i?u.a=i:u=G(u,e),u},G=(e,t)=>{const o=r({},e);return void 0!==t.count&&(o.c=t.count),void 0!==t.offset&&(o.o=t.offset),o},w=async(e,r)=>{const{userName:n,fromDate:i,toDate:u}=r,c=o(t,"/API_GetAchievementsEarnedBetween.php",e,{u:n,f:(i.getTime()/1e3).toFixed(0),t:(u.getTime()/1e3).toFixed(0)}),l=await s({url:c});return a(l,{shouldCastToNumbers:["AchievementID","Points","GameID"],shouldMapToBooleans:["HardcoreMode"]})},g=async(e,r)=>{const{userName:n,onDate:i}=r,u=o(t,"/API_GetAchievementsEarnedOnDay.php",e,{u:n,d:`${i.getFullYear()}-${i.getMonth()+1}-${i.getDate()}`}),c=await s({url:u});return a(c,{shouldCastToNumbers:["AchievementID","Points","GameID"],shouldMapToBooleans:["HardcoreMode"]})},S=async(e,r)=>{const{gameId:n,userName:i}=r,u=o(t,"/API_GetGameInfoAndUserProgress.php",e,{g:n,u:i}),c=await s({url:u});return a(c,{shouldCastToNumbers:["ID","NumAwarded","NumAwardedHardcore","Points","TrueRatio","DisplayOrder","NumDistinctPlayersCasual","NumDistinctPlayersHardcore","Released"]})},R=async(e,r)=>{const{userName:n}=r,i=o(t,"/API_GetUserClaims.php",e,{u:n}),u=await s({url:i});return a(u,{shouldCastToNumbers:["ID","GameID","ClaimType","SetType","Status","Extension","Special","MinutesLeft"]})},_=async(e,r)=>{const{userName:n}=r,i=o(t,"/API_GetUserCompletedGames.php",e,{u:n}),u=await s({url:i});return a(u,{shouldCastToNumbers:["GameID","ConsoleID","MaxPossible","NumAwarded","PctWon"],shouldMapToBooleans:["HardcoreMode"]})},U=async(e,r)=>{const{gameId:n,userName:i}=r,u=o(t,"/API_GetUserGameRankAndScore.php",e,{g:n,u:i}),c=await s({url:u});return a(c,{shouldCastToNumbers:["TotalScore","UserRank"]})},M=async(e,r)=>{const{userName:n}=r,i=o(t,"/API_GetUserPoints.php",e,{u:n}),u=await s({url:i});return a(u)},H=async(e,r)=>{const{userName:n,gameIds:i}=r,u=o(t,"/API_GetUserProgress.php",e,{u:n,i:i.join(",")}),c=await s({url:u});return a(c,{shouldCastToNumbers:["NumPossibleAchievements","PossibleScore","NumAchieved","ScoreAchieved","NumAchievedHardcore","ScoreAchievedHardcore"]})},k=async(e,r)=>{const{userName:n,offset:i,count:u}=r,c={u:n};void 0!==i&&(c.o=i),void 0!==u&&(c.c=u);const l=o(t,"/API_GetUserRecentlyPlayedGames.php",e,c),m=await s({url:l});return a(m,{shouldCastToNumbers:["GameID","ConsoleID","NumPossibleAchievements","PossibleScore","NumAchieved","ScoreAchieved","NumAchievedHardcore","ScoreAchievedHardcore","MyVote"]})},O=async(e,r)=>{const{userName:n,recentGamesCount:i,recentAchievementsCount:u}=r,c={u:n};void 0!==i&&(c.g=i),void 0!==u&&(c.a=u);const l=o(t,"/API_GetUserSummary.php",e,c),m=await s({url:l});return a(m,{shouldCastToNumbers:["GameID","ConsoleID","ID","LastGameID","ForumTopicID","activitytype","ContribCount","ContribYield","TotalPoints","TotalSoftcorePoints","TotalTruePoints","Permissions","NumPossibleAchievements","PossibleScore","NumAchieved","ScoreAchieved","NumAchievedHardcore","ScoreAchievedHardcore","Points","SoftcorePoints"],shouldMapToBooleans:["Untracked","UserWallActive","IsAwarded","HardcoreAchieved"]})},$=e=>{if(!e.userName||!e.webApiKey)throw new Error('\n      buildAuthorization() requires an object containing a\n      userName and webApiKey. eg:\n\n      const authorization = buildAuthorization({\n        userName: "myUserName",\n        webApiKey: "myWebApiKey"\n      })\n    ');return e};export{f as AchievementDistributionFlags,p as ClaimSetType,A as ClaimStatus,h as ClaimType,$ as buildAuthorization,I as getAchievementCount,y as getAchievementDistribution,l as getAchievementOfTheWeek,i as getAchievementUnlocks,w as getAchievementsEarnedBetween,g as getAchievementsEarnedOnDay,m as getActiveClaims,u as getConsoleIds,P as getGame,v as getGameExtended,S as getGameInfoAndUserProgress,c as getGameList,N as getGameRankAndScore,T as getGameRating,C as getTicketData,d as getTopTenUsers,R as getUserClaims,_ as getUserCompletedGames,U as getUserGameRankAndScore,M as getUserPoints,H as getUserProgress,k as getUserRecentlyPlayedGames,O as getUserSummary,s as unsafe_call};
//# sourceMappingURL=api.modern.js.map
